#!/bin/bash

# Default values
DEFAULT_VM_NAME="New VM $(date +"%+4Y-%m-%d")"
DEFAULT_VM_MEMORY=4096  # 4096 Mo = 4Gb
DEFAULT_VM_DISK_SIZE=65536  # 65536 Mo = 64 Gib
DEFAULT_VMS_FOLDER="$HOME/VirtualBox VMs"
DEFAULT_VM_NETWORK=
DEFAULT_VM_BOOT=
VBOX_MANAGE="/usr/bin/vboxmanage"  # Tested version: 7.0.20r163906

list_vms () {  # usage: gen-vm list
    printf "Virtual Machines list:\n\n"
    vm_list=$($VBOX_MANAGE list vms)

    while read -r data; do
        data="${data//\"}"  # remove ""

        vm_name=$(echo $data | cut -d " " -f 1)
        vm_creation_date=$($VBOX_MANAGE getextradata $vm_name creation_date)
        vm_creation_user=$($VBOX_MANAGE getextradata $vm_name creation_user)
        vm_memory=$($VBOX_MANAGE showvminfo $vm_name | awk '/Memory size:/ {print $3}')
        vm_state=$($VBOX_MANAGE showvminfo $vm_name | grep "State:" | awk -F '[()]' '{gsub(/State:                       /, ""); print $1}')  # Bidouille mais Ã§a marche
        
        vm_disk_size="?"
        vm_medium_info=$($VBOX_MANAGE showmediuminfo disk "$DEFAULT_VMS_FOLDER/$vm_name/$vm_name.vdi" > /dev/null 2>&1)
        if [ $? == 0 ]; then
            vm_disk_size=$($VBOX_MANAGE showmediuminfo disk "$DEFAULT_VMS_FOLDER/$vm_name/$vm_name.vdi" | awk '/Capacity:/ {print $2}')
        fi
        
        echo " - Name: $vm_name"
        echo "   Memory: $vm_memory"
        printf "   Disk size: %sMB\n" $vm_disk_size
        echo "   State: $vm_state"
        echo "   Creation Date: $vm_creation_date"
        echo "   Creation User: $vm_creation_user"

        printf "\n"

    done <<< "$vm_list"

    # VBoxManage showvminfo 765f3483-b745-45fd-b0fd-b986df54b323

    # doc: https://www.virtualbox.org/manual/ch08.html#vboxmanage-list
    # get vm metadata: https://www.virtualbox.org/manual/ch08.html#vboxmanage-getextradata
}

create_vm () {  # usage: gen-vm create --name <vm name> --mem <memory> --disk <disk space> --net <network> --boot <boot type>
    echo "--- create VM ---"

    ######################################################################
    ## Vbox Documentation: https://www.virtualbox.org/manual/ch08.html ##

    # delete VM if already exists

    # create new VM

    # config memory and boot type => PXE
    # https://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm

    # create virtual disk

    # add SATA AHCI controller to use SATA drive

    # attach disk to SATA controller

    # config NIC to NAT

    # config PXE boot
    # https://www.virtualbox.org/manual/ch09.html#nat-adv-tftp

    # add metadata => creation date + creation user
    # https://www.virtualbox.org/manual/ch08.html#vboxmanage-setextradata

    # auto logon
    # https://www.virtualbox.org/manual/ch09.html#autologon_unix
}

start_vm () {  # usage: gen-vm start <vm name>
    echo "--- start VM ---"
}

stop_vm () {  # usage: gen-vm stop <vm name>
    echo "--- stop VM ---"
}

destroy_vm () {  # usage: gen-vm destroy <vm name>
    echo "--- destroy VM ---"

    # doc: https://www.virtualbox.org/manual/ch08.html#vboxmanage-unregistervm
}

main () {
    help=false

    if [[ $# < 2 ]]; then  # if less than 2 arguments are provided, display help message
        help=true
    fi

    command=$1

    case $command in
        list | ls | l)
            list_vms
            ;;

        create | new | c | n)
            if [ $help == true ]; then
                echo "Help message for: create"
            else
                create_vm
            fi
            ;;
        
        start | up | s)
            if [ $help == true ]; then
                echo "Help message for: start"
            else
                start_vm
            fi
            ;;

        stop | down | d)
            if [ $help == true ]; then
                echo "Help message for: stop"
            else
               stop_vm
            fi
            ;;

        destroy)
            if [ $help == true ]; then
                echo "Help message for: destroy"
            else
               destroy_vm
            fi
            ;;

        *)
            echo "Unknown, *display command usage*"
            ;;
    esac
}

main $@
